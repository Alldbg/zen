version: '2'
services:
  nginx:
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TZ=Europe/Paris
    networks:
      actualisation_network:
        ipv4_address: 172.0.0.10

  node:
    restart: unless-stopped
    build:
      context: .
      dockerfile: dockerfile_back
    volumes:
     - "./back:/home/back"
    expose:
      - "8080"
      - "8081"
    networks:
      actualisation_network:
        ipv4_address: 172.0.0.100
    depends_on:
      - "db"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CLIENT_OAUTH_ID=${CLIENT_OAUTH_ID}
      - CLIENT_OAUTH_SECRET=${CLIENT_OAUTH_SECRET}
      - COOKIE_SECRET=${COOKIE_SECRET}
      - AUTH_REDIRECT_URI=${AUTH_REDIRECT_URI}
      - SENTRY_ENV=${SENTRY_ENV}
      - SENTRY_URL=${SENTRY_URL}
      - TZ=Europe/Paris

  front:
    restart: unless-stopped
    build:
      context: .
      dockerfile: dockerfile_front
    volumes:
     - "./front:/home/front"
    expose:
      - "3000"
    environment:
      - TZ=Europe/Paris
    networks:
      actualisation_network:
        ipv4_address: 172.0.0.110

  db:
    image: postgres
    restart: always
    networks:
      actualisation_network:
        ipv4_address: 172.0.0.150
    volumes:
      - postgres-data:/var/lib/postgresql
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=Europe/Paris

  browserless:
    image: browserless/chrome
    restart: unless-stopped
    expose:
      - "3000"
    shm_size: "1gb"
    volumes:
     - "./back:/home/back"
    networks:
      actualisation_network:
        ipv4_address: 172.0.0.200

networks:
  actualisation_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.0.0.0/16
          gateway: 172.0.0.1

volumes:
 postgres-data:
